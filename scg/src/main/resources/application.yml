server: 
  port: 8088

# Springboot Setting
spring: 
  application: 
    name: apigateway
  redis:
    host: localhost
    port: 6379  
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
    gateway:
#      globalcors:
#        cors-configurations:
#          '[/**]':
#            allowedOrigins: "https://docs.spring.io"
#            allowedMethods:
#            - GET
      metrics:
        enabled: true
      httpclient:
        connect-timeout: 7000
        response-timeout: 7000
      # Gateway 공통 필터
      default-filters:
      # - name: CircuitBreaker
      #   args:
      #     name: nhCircuitBreaker
      #     fallbackUri: forward:/fallback
      #   # metadata:
      #   #   connect-timeout: 7000
      #   #   response-timeout: 7000
      # - name: Retry
      #   args:
      #     retries: 3
      #     statuses: BAD_GATEWAY, INTERNAL_SERVER_ERROR, SERVICE_UNAVAILABLE
      #     series: # empty
      #     methods:
      #     - GET
      #     - POST
      #     - PUT
      #     - DELETE
      #     backoff: 
      #       firstBackoff: 500ms   #첫번째 재시도는 실패 후 0.5초 후 수행  
      #       maxBackoff: 2000ms    #재시도 간격 
      #       factor: 10            #firstBackoff * (factor^retries)가 재시도 간격임. maxBackoff보다 클 수는 없음. 
      #     # exceptions:
      #     # - java.util.concurrent.TimeoutException
      - name: GlobalFilter
        args:
          baseMessage: Spring Cloud Gateway GlobalFilter
          preLogger: false
          postLogger: false
      # MSA 라우팅 정의
      # ID, 목적지(uri), 조건(Predicate), 필터로 구성된다.
      routes:
      - id: microservice-01
        uri: lb://microservice-01
        # uri: http://localhost:8081
        predicates:
        - Path=/client/**
        - Host=localhost:8088
        - Method=GET
        # - Cookie=chocolate, ch.p
        filters:
        - RewritePath=/client/(?<path>.*),/$\{path}
        - name: RequestRateLimiter
          args:
            # key-resolver: '#{@remoteKeyResolver}'
            redis-rate-limiter.replenishRate: 4     # 초당 허용하는 기본 request 수
            redis-rate-limiter.burstCapacity: 8     # 초과 요청이 발생하면 허용하는 maximum request 수, 사용된 Capacity에 대해서 이후 1초 동안은 허용하지 않는다.
      - id: microservice-02
        uri: lb://microservice-01
        predicates:
        - Path=/test/**
        filters:
        - RewritePath=/test/(?<path>.*),/$\{path}

# Eureka Setting
eureka:
  instance:
    preferIpAddress: true
    lease-renewal-interval-in-seconds: 300     # Service Registry Interval Time(30초)
    lease-expiration-duration-in-seconds: 300  # Service Registry Duration Time(30초)
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      # defaultZone: http://CLTSOSSIFEUREKA.apps.internal/eureka/
      # defaultZone: http://CLTSOSSIFEUREKA.apps.pas.nhbank.test.nonghyup.com/eureka/
      defaultZone: http://localhost:8091/eureka
      # defaultZone: http://localhost:8092/eureka/, http://localhost:8093/eureka/
    # Service Registry Cache Interval Time(30초)
    registry-fetch-interval-seconds: 300
    disable-delta: true

# Actutor Setting
management:
  endpoint:
    shutdown:
      enabled: true
    info:
      enabled: true
    gateway:
      enabled: true
  endpoints:
    web:
      exposure:
        include: shutdown, info, gateway


# Resilience4j Setting
resilience4j.circuitbreaker:
  # circuitBreakerAspectOrder: 1
  configs:
    default:
      registerHealthIndicator: true
      # actuator를 통해 circuitbraker 상태를 확인하기 위해 설정
      slidingWindowSize: 10
      # Circuit 기준 Window Size
      minimumNumberOfCalls: 2
      # Circuit Breaker가 에러 비율 또 slow call 비율을 계산하기 전에 요구되는 최소한의 요청 수
      failureRateThreshold: 70
      # 에러 비율 (퍼센트)로 해당 값 이상으로 에러 발생시 서킷이 Open 된다.
      waitDurationInOpenState: 10s
      # 서킷의 상태가 Open에서 Half-open으로 변경되기 전에 Circuit Breaker가 기다리는 시간
  instances:
    nhCircuitBreaker:
      baseConfig: default

# resilience4j.bulkhead:
#   instances:
#     nhCircuitBreaker:
#       maxConcurrentCalls: 3
#       # 허가된 동시 실행 수를 10로 지정
#       maxWaitDuration: 0
#       # 포화 상태의 Bulkhead에 진입하기 위해 block 되는 최대 시간, 값이 0이므로 바로 요청을 막는다.

# resilience4j.ratelimiter:
#   instances:
#     nhCircuitBreaker:
#       limitForPeriod: 1
#       # limitRefreshPeriod 기간 동안 허용되는 요청 수
#       limitRefreshPeriod: 10s
#       # limit refresh 기간
#       timeoutDuration: 0
#       # 허가를 위해 쓰레드가 대기하는 기본 시간
#       registerHealthIndicator: false
#       eventConsumerBufferSize: 100

# # fallback method가 정의되어있지 않은 에러의 경우에만 재시도 한다.
# resilience4j.retry:
#   # retryAspectOrder: 2
#   instances:
#     nhCircuitBreaker:
#       maxRetryAttempts: 3
#       # 최대 재시도 수
#       waitDuration: 5000ms
#       # 재시도 사이에 고정된 시간
#       retryExceptions:
#         - java.net.ConnectException
#         - java.util.concurrent.TimeoutException
#       # Empty 일 경우 모든 에러 클래스에 대해 재시도
# #        - org.springframework.web.client.HttpServerErrorException
# #        - io.github.resilience4j.circuitbreaker.Exception

resilience4j.timelimiter:
  instances:
    nhCircuitBreaker:
      timeoutDuration: 6s
      # 원격 서버로부터 해당 시간안에 응답이 오는 것을 제한

resilience4j:
  circuitbreaker:
    circuitBreakerAspectOrder: 1
  retry:
    retryAspectOrder: 2
  bulkhead:
    bulkheadAcpectOrder: 3